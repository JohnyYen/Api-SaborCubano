// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SaborCubano.Infrastructure.Persistence;

#nullable disable

namespace SaborCubano.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241203133409_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SaborCubano.Domain.Models.AppUserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_Activity")
                        .HasColumnType("integer");

                    b.Property<int>("Id_User")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_Activity");

                    b.HasIndex("Id_User");

                    b.ToTable("AppUserActivity");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.CouponAppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_AppUser")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Coupon")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_AppUser");

                    b.HasIndex("Id_Coupon");

                    b.ToTable("CouponAppUser");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.PlateCookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_CT")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Plate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_CT");

                    b.HasIndex("Id_Plate");

                    b.ToTable("PlateCookType");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.PlateIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_Ingredient")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Plate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_Ingredient");

                    b.HasIndex("Id_Plate");

                    b.ToTable("PlateIngredient");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.RestaurantBussinesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_BS")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Res")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_BS");

                    b.HasIndex("Id_Res");

                    b.ToTable("RestaurantBussinesType");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.RestaurantFoodTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_FoodTypes")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Res")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_FoodTypes");

                    b.HasIndex("Id_Res");

                    b.ToTable("RestaurantFoodTypes");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.RestaurantService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_Res")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Service")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_Res");

                    b.HasIndex("Id_Service");

                    b.ToTable("RestaurantService");
                });

            modelBuilder.Entity("api.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("api.Models.BussinesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BussinesType");
                });

            modelBuilder.Entity("api.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_Prov")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id_Prov");

                    b.ToTable("City");
                });

            modelBuilder.Entity("api.Models.CookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CookType");
                });

            modelBuilder.Entity("api.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("Discount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Expire_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id_Res")
                        .HasColumnType("integer");

                    b.Property<int>("Id_User")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_Res");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("api.Models.FoodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodType");
                });

            modelBuilder.Entity("api.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("api.Models.Plate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<int?>("CookTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id_Res")
                        .HasColumnType("integer");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CookTypeId");

                    b.HasIndex("Id_Res");

                    b.HasIndex("IngredientId");

                    b.ToTable("Plate");
                });

            modelBuilder.Entity("api.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("api.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Close_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cont_Num")
                        .HasColumnType("text");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email_Res")
                        .HasColumnType("text");

                    b.Property<bool?>("Have_Home")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_City")
                        .HasColumnType("integer");

                    b.Property<int?>("Id_User")
                        .HasColumnType("integer");

                    b.Property<bool?>("Is_Reservas")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime?>("Open_Date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id_City");

                    b.HasIndex("Id_User");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateWriting")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Is_Funny")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_Util")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Opinion")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.PrimitiveCollection<byte[][]>("Photos")
                        .HasColumnType("bytea[]");

                    b.Property<string>("Review_Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("Review");

                    b.HasDiscriminator<string>("Review_Type").HasValue("Review");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("User_Type")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("User_Type").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("api.Models.PlateReview", b =>
                {
                    b.HasBaseType("api.Models.Review");

                    b.Property<bool>("Eat_In_Local")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_Plate")
                        .HasColumnType("integer");

                    b.Property<int>("Valoration_Plate")
                        .HasColumnType("integer");

                    b.HasIndex("Id_Plate");

                    b.ToTable("Review");

                    b.HasDiscriminator().HasValue("Plate");
                });

            modelBuilder.Entity("api.Models.RestaurantReview", b =>
                {
                    b.HasBaseType("api.Models.Review");

                    b.Property<int>("Id_Res")
                        .HasColumnType("integer");

                    b.Property<int>("Valoration_Higiene")
                        .HasColumnType("integer");

                    b.Property<int>("Valoration_Local")
                        .HasColumnType("integer");

                    b.Property<int>("Valoration_Price")
                        .HasColumnType("integer");

                    b.Property<int>("Valoration_Service")
                        .HasColumnType("integer");

                    b.HasIndex("Id_Res");

                    b.ToTable("Review");

                    b.HasDiscriminator().HasValue("Restaurant");
                });

            modelBuilder.Entity("api.Models.Administrator", b =>
                {
                    b.HasBaseType("api.Models.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.HasBaseType("api.Models.User");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<byte[][]>("Gallery")
                        .HasColumnType("bytea[]");

                    b.HasIndex("AppUserId");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("api.Models.RestaurantChief", b =>
                {
                    b.HasBaseType("api.Models.User");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("Chief");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.AppUserActivity", b =>
                {
                    b.HasOne("api.Models.Activity", "Activity")
                        .WithMany("AppUser")
                        .HasForeignKey("Id_Activity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.CouponAppUser", b =>
                {
                    b.HasOne("api.Models.AppUser", "AppUser")
                        .WithMany("Coupon")
                        .HasForeignKey("Id_AppUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Coupon", "Coupon")
                        .WithMany("AppUsers")
                        .HasForeignKey("Id_Coupon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.PlateCookType", b =>
                {
                    b.HasOne("api.Models.CookType", "CookType")
                        .WithMany()
                        .HasForeignKey("Id_CT")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Plate", "Plate")
                        .WithMany("CookTypes")
                        .HasForeignKey("Id_Plate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CookType");

                    b.Navigation("Plate");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.PlateIngredient", b =>
                {
                    b.HasOne("api.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("Id_Ingredient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Plate", "Plate")
                        .WithMany("Ingredients")
                        .HasForeignKey("Id_Plate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Plate");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.RestaurantBussinesType", b =>
                {
                    b.HasOne("api.Models.BussinesType", "BussinesType")
                        .WithMany("RestaurantBussinesTypes")
                        .HasForeignKey("Id_BS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Restaurant", "Restaurant")
                        .WithMany("BussinesTypes")
                        .HasForeignKey("Id_Res")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BussinesType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.RestaurantFoodTypes", b =>
                {
                    b.HasOne("api.Models.FoodType", "FoodType")
                        .WithMany("Restaurants")
                        .HasForeignKey("Id_FoodTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Restaurant", "Restaurant")
                        .WithMany("FoodTypes")
                        .HasForeignKey("Id_Res")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodType");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("SaborCubano.Domain.Models.RestaurantService", b =>
                {
                    b.HasOne("api.Models.Restaurant", "Restaurant")
                        .WithMany("Services")
                        .HasForeignKey("Id_Res")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Service", "Service")
                        .WithMany("Restaurants")
                        .HasForeignKey("Id_Service")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("api.Models.City", b =>
                {
                    b.HasOne("api.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("Id_Prov")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("api.Models.Coupon", b =>
                {
                    b.HasOne("api.Models.Restaurant", "Restaurant")
                        .WithMany("Coupons")
                        .HasForeignKey("Id_Res")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("api.Models.Plate", b =>
                {
                    b.HasOne("api.Models.CookType", null)
                        .WithMany("Plates")
                        .HasForeignKey("CookTypeId");

                    b.HasOne("api.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("Id_Res")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Ingredient", null)
                        .WithMany("Plates")
                        .HasForeignKey("IngredientId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("api.Models.Restaurant", b =>
                {
                    b.HasOne("api.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("Id_City")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.RestaurantChief", "Chief")
                        .WithMany("Restaurants")
                        .HasForeignKey("Id_User");

                    b.Navigation("Chief");

                    b.Navigation("City");
                });

            modelBuilder.Entity("api.Models.PlateReview", b =>
                {
                    b.HasOne("api.Models.Plate", "Plate")
                        .WithMany()
                        .HasForeignKey("Id_Plate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plate");
                });

            modelBuilder.Entity("api.Models.RestaurantReview", b =>
                {
                    b.HasOne("api.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("Id_Res")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany("AppUsers")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("api.Models.Activity", b =>
                {
                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("api.Models.BussinesType", b =>
                {
                    b.Navigation("RestaurantBussinesTypes");
                });

            modelBuilder.Entity("api.Models.City", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("api.Models.CookType", b =>
                {
                    b.Navigation("Plates");
                });

            modelBuilder.Entity("api.Models.Coupon", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("api.Models.FoodType", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("api.Models.Ingredient", b =>
                {
                    b.Navigation("Plates");
                });

            modelBuilder.Entity("api.Models.Plate", b =>
                {
                    b.Navigation("CookTypes");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("api.Models.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("api.Models.Restaurant", b =>
                {
                    b.Navigation("BussinesTypes");

                    b.Navigation("Coupons");

                    b.Navigation("FoodTypes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("api.Models.Service", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AppUsers");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("api.Models.RestaurantChief", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
